<div class="bg-white p-4 rounded shadow-lg flex justify-center gap-4 items-center mb-8">
    <p class="text-3xl font-bold">{{races.length}}</p>
    <h3 class="text-xl font-semibold text-gray-700">Races</h3>
</div>
<div class="text-sm">
    <div class="bg-white hover:bg-green-50 hover:scale-105 transition p-2 rounded shadow mb-6 cursor-pointer"
         onclick="document.getElementById('raceModal-new').classList.remove('hidden')">
        + Add New Race
    </div>
    {{#each races}}
        <div class="bg-white hover:bg-red-50 hover:scale-105 transition p-2 rounded shadow mt-2 flex justify-between items-center gap-4 cursor-pointer"
             onclick="document.getElementById('raceModal-{{id}}').classList.remove('hidden')">
            <div class="flex items-center gap-2">
                <img src="../flags/{{flag}}" class="inline h-5" alt="flag={{flag}}">
                <div class="font-bold text-nowrap">{{name}}</div>
            </div>
            <div class="overflow-hidden whitespace-nowrap text-ellipsis">{{formattedDate}}</div>
        </div>

        <div id="raceModal-{{id}}" data-race-id="{{id}}"
             class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 race-modal">
            <div class="bg-white p-6 rounded shadow-xl w-full max-w-6xl space-y-4 overflow-y-auto max-h-[95vh]">
                <h2 class="text-xl font-bold">Edit Race</h2>
                <form method="POST" action="/admin/races/{{id}}" class="space-y-4">
                    <div class="grid md:grid-cols-6 gap-6">
                        <div class="md:col-span-2 lg:col-span-3 space-y-2">
                            <input type="hidden" name="id" value="{{id}}">

                            <label for="name-{{id}}" class="block mb-1 font-medium text-xs">Race Name</label>
                            <input type="text" id="name-{{id}}" name="name" value="{{name}}"
                                   class="w-full border px-2 py-1 rounded" style="margin-top: 2px!important;">

                            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-1 lg:grid-cols-2 gap-4">
                                <div class="w-full">
                                    <label for="nameShort-{{id}}" class="block font-medium text-xs">Location</label>
                                    <input type="text" id="nameShort-{{id}}" name="nameShort" value="{{nameShort}}"
                                           class="w-full border px-2 py-1 rounded" style="margin-top: 2px!important;">
                                </div>
                                <div class="w-full relative">
                                    <label for="flag-{{id}}" class="block font-medium text-xs">Flag</label>
                                    <div class="flag-dropdown-container">
                                        <button type="button" class="flag-dropdown-toggle w-full border px-2 py-1 rounded text-left flex items-center justify-between" style="margin-top: 2px!important;">
                                            <span class="flag-selected-text">
                                                {{#if flag}}
                                                    <img src="/flags/{{flag}}" alt="{{flag}}" class="w-6 h-4 mr-2 object-cover inline">
                                                    {{#each ../flags}}
                                                        {{#if (eq this.filename ../flag)}}{{this.name}}{{/if}}
                                                    {{/each}}
                                                {{else}}
                                                    Select a flag...
                                                {{/if}}
                                            </span>
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                            </svg>
                                        </button>
                                        <div class="flag-dropdown-menu absolute top-full left-0 w-full bg-white border border-gray-300 rounded shadow-lg z-10 max-h-60 overflow-y-auto" style="display: none;">
                                            <div class="flag-option p-2 hover:bg-gray-100 cursor-pointer flex items-center {{#unless flag}}selected{{/unless}}" data-value="">
                                                <span>Select a flag...</span>
                                            </div>
                                            {{#each ../flags}}
                                                <div class="flag-option p-2 hover:bg-gray-100 cursor-pointer flex items-center {{#if (eq this.filename ../flag)}}selected bg-gray-100{{/if}}" data-value="{{this.filename}}">
                                                    <img src="/flags/{{this.filename}}" alt="{{this.filename}}" class="w-6 h-4 mr-2 object-cover">
                                                    <span>{{this.name}}</span>
                                                </div>
                                            {{/each}}
                                        </div>
                                    </div>
                                    <input type="hidden" id="flag-{{id}}" name="flag" value="{{flag}}">
                                </div>
                            </div>

                            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-1 lg:grid-cols-2 gap-4">
                                <div class="w-full">
                                    <label for="date-{{id}}" class="block font-medium text-xs">Day</label>
                                    <input type="date" id="date-{{id}}" name="date" value="{{date}}"
                                           class="w-full border px-2 py-1 rounded" style="margin-top: 2px!important;">
                                </div>
                                <div class="w-full">
                                    <label for="time-{{id}}" class="block font-medium text-xs">Time</label>
                                    <input type="time" id="time-{{id}}" name="time" value="{{time}}"
                                           class="w-full border px-2 py-1 rounded" style="margin-top: 2px!important;">
                                </div>
                            </div>

                            <div class="grid grid-cols-1 sm:grid-cols-3 md:grid-cols-1 lg:grid-cols-3 gap-4">
                                <div class="w-full">
                                    <label for="weatherText-{{id}}"
                                           class="block mb-1 font-medium text-xs">Weather</label>
                                    <input type="text" id="weatherText-{{id}}" name="weatherText"
                                           value="{{weatherText}}"
                                           class="w-full border px-2 py-1 rounded" style="margin-top: 2px!important;">
                                </div>
                                <div class="w-full">
                                    <label for="weatherIcon-{{id}}" class="block mb-1 font-medium text-xs">Weather
                                        Icon</label>
                                    <input type="text" id="weatherIcon-{{id}}" name="weatherIcon"
                                           value="{{weatherIcon}}"
                                           class="w-full border px-2 py-1 rounded" style="margin-top: 2px!important;">
                                </div>
                                <div class="w-full">
                                    <label for="weatherTemperature-{{id}}" class="block mb-1 font-medium text-xs">Temperature
                                        (Â°C)</label>
                                    <input type="number" id="weatherTemperature-{{id}}" name="weatherTemperature"
                                           value="{{weatherTemperature}}"
                                           class="w-full border px-2 py-1 rounded" style="margin-top: 2px!important;">
                                </div>
                            </div>

                            <div class="w-full relative">
                                <label for="track_img-{{id}}" class="block font-medium text-xs">Track Image</label>
                                <div class="track-dropdown-container">
                                    <button type="button" class="track-dropdown-toggle w-full border px-2 py-1 rounded text-left flex items-center justify-between" style="margin-top: 2px!important;">
                                        <span class="track-selected-text">
                                            {{#if track_img}}
                                                {{#each ../circuits}}
                                                    {{#if (eq this.filename ../track_img)}}
                                                        <img src="/flags/{{this.flag}}" alt="{{this.short}}" class="w-6 h-4 mr-2 object-cover inline">{{this.name}}
                                                    {{/if}}
                                                {{/each}}
                                            {{else}}
                                                Select a circuit...
                                            {{/if}}
                                        </span>
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                        </svg>
                                    </button>
                                    <div class="track-dropdown-menu top-full left-0 w-full bg-white border border-gray-300 rounded shadow-lg z-10 max-h-60 overflow-y-auto" style="display: none;">
                                        <div class="track-option p-2 hover:bg-gray-100 cursor-pointer flex items-center {{#unless track_img}}selected{{/unless}}" data-value="">
                                            <span>Select a circuit...</span>
                                        </div>
                                        {{#each ../circuits}}
                                            <div class="track-option p-2 hover:bg-gray-100 cursor-pointer flex items-center {{#if (eq this.filename ../track_img)}}selected bg-gray-100{{/if}}" data-value="{{this.filename}}">
                                                <img src="/flags/{{this.flag}}" alt="{{this.short}}" class="w-6 h-4 mr-2 object-cover">
                                                <span>{{this.name}}</span>
                                            </div>
                                        {{/each}}
                                    </div>
                                </div>
                                <input type="hidden" id="track_img-{{id}}" name="track_img" value="{{track_img}}">
                            </div>

                            <div class="flex gap-4">
                                <div class="w-full">
                                    <label class="cursor-pointer">
                                        <span class="font-medium text-xs">Predictions Started</span>
                                        <span class="relative block">
                                            <input type="checkbox" name="predictionsStarted"
                                                   id="predictionsStarted{{id}}" class="sr-only peer"
                                                   onchange="this.value = this.checked ? 'true' : 'false';"
                                                   value="{{#if predictionsStarted}}true{{else}}false{{/if}}"
                                                   {{#if predictionsStarted}}checked{{/if}}>
                                            <span class="block w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></span>
                                        </span>
                                    </label>
                                </div>
                                <div class="w-full">
                                    <label class="cursor-pointer">
                                        <span class="font-medium text-xs">Predictions Ended</span>
                                        <span class="relative block">
                                            <input type="checkbox" name="predictionsEnded" id="predictionsEnded{{id}}"
                                                   class="sr-only peer"
                                                   onchange="this.value = this.checked ? 'true' : 'false';"
                                                   value="{{#if predictionsEnded}}true{{else}}false{{/if}}"
                                                   {{#if predictionsEnded}}checked{{/if}}>
                                            <span class="block w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></span>
                                        </span>
                                    </label>
                                </div>
                            </div>

                            <div class="driver-pool bg-gray-50 p-2 rounded mb-4">
                                <div class="text-xs text-gray-500 mb-2">Driver Pool â Drag to Quali and/or Race grids
                                </div>
                                <div id="driver-pool-{{id}}" class="grid grid-cols-2 gap-1 driver-pool-items" data-pool>
                                    {{#each ../drivers}}
                                        <div class="driver-item flex items-center p-1 cursor-move rounded"
                                             style="background-color: {{color}}; color: white;"
                                             data-driver-id="{{id}}" draggable="true">
                                            <span class="text-xs truncate text-shadow">{{name}} - {{team}}</span>
                                        </div>
                                    {{/each}}
                                </div>
                            </div>
                        </div>

                        <div class="md:col-span-4 lg:col-span-3 grid grid-cols-1 sm:grid-cols-2 gap-4 text-xs">
                            <div>
                                <label class="block mb-1 font-medium text-xs">Qualification Result</label>
                                <div id="quali-grid-{{id}}">
                                    {{#each gridArray}}
                                        <div class="grid-position flex items-center mb-2" data-position="{{position}}">
                                            <span class="mr-2 w-5 text-center font-bold">{{position}}</span>
                                            <div class="position-slot flex-1 min-h-6 border border-gray-200 rounded bg-white"
                                                 data-slot-type="quali" data-slot-index="{{@index}}"
                                                 data-driver-id="{{#if driver}}{{driver.id}}{{/if}}">
                                                {{#if driver}}
                                                    <div class="driver-item flex items-center p-1 cursor-move rounded w-full"
                                                         style="background-color: {{driver.color}}; color: white;"
                                                         data-driver-id="{{driver.id}}" draggable="true">
                                                        <span class="text-xs text-shadow">{{driver.name}} - {{driver.team}}</span>
                                                        <input type="hidden" name="drivers[]" value="{{driver.id}}">
                                                    </div>
                                                {{else}}
                                                    <div class="h-6 flex items-center justify-center text-gray-400 empty-slot select-none">
                                                        <input type="hidden" name="drivers[]" value="">
                                                        Drop driver here
                                                    </div>
                                                {{/if}}
                                            </div>
                                        </div>
                                    {{/each}}
                                </div>
                            </div>
                            <div>
                                <label class="block mb-1 font-medium text-xs">Race Result</label>
                                <div id="race-grid-{{id}}">
                                    {{#each resultArray}}
                                        <div class="grid-position flex items-center mb-2" data-position="{{position}}">
                                            <span class="mr-2 w-5 text-center font-bold">{{position}}</span>
                                            <div class="position-slot flex-1 min-h-6 border border-gray-200 rounded bg-white"
                                                 data-slot-type="race" data-slot-index="{{@index}}"
                                                 data-driver-id="{{#if driver}}{{driver.id}}{{/if}}">
                                                {{#if driver}}
                                                    <div class="driver-item flex items-center p-1 cursor-move rounded w-full"
                                                         style="background-color: {{driver.color}}; color: white;"
                                                         data-driver-id="{{driver.id}}" draggable="true">
                                                        <span class="text-xs text-shadow">{{driver.name}} - {{driver.team}}</span>
                                                        <input type="hidden" name="result[]" value="{{driver.id}}">
                                                    </div>
                                                {{else}}
                                                    <div class="h-6 flex items-center justify-center text-gray-400 empty-slot select-none">
                                                        <input type="hidden" name="result[]" value="">
                                                        Drop driver here
                                                    </div>
                                                {{/if}}
                                            </div>
                                        </div>
                                    {{/each}}
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="flex justify-between mt-6">
                        <button type="button" onclick="this.closest('.fixed').classList.add('hidden')"
                                class="bg-gray-300 px-4 py-2 rounded">Cancel
                        </button>
                        <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">Save</button>
                    </div>
                </form>
                <button type="button" class="bg-purple-500 hover:bg-purple-600 text-white py-2 px-4 rounded mb-4 load-quali-api-btn" data-race-id="{{id}}">
                    Load qualifying from API
                </button>
                <button type="button" class="bg-purple-500 hover:bg-purple-600 text-white py-2 px-4 rounded mb-4 load-result-api-btn" data-race-id="{{id}}">
                    Load race from API
                </button>
            </div>
        </div>
    {{/each}}

    <div id="raceModal-new" data-race-id="new"
         class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 race-modal">
        <div class="bg-white p-6 rounded shadow-xl w-full max-w-6xl space-y-4 overflow-y-auto max-h-[95vh]">
            <h2 class="text-xl font-bold">Add New Race</h2>
            <form method="POST" action="/admin/races" class="space-y-4">
                <div class="grid md:grid-cols-6 gap-6">
                    <div class="md:col-span-2 lg:col-span-3 space-y-2">
                        <input type="hidden" name="id" value="new">

                        <label for="name-new" class="block mb-1 font-medium text-xs">Race Name</label>
                        <input type="text" id="name-new" name="name" value=""
                               class="w-full border px-2 py-1 rounded" style="margin-top: 2px!important;">

                        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-1 lg:grid-cols-2 gap-4">
                            <div class="w-full">
                                <label for="nameShort-new" class="block font-medium text-xs">Location</label>
                                <input type="text" id="nameShort-new" name="nameShort" value=""
                                       class="w-full border px-2 py-1 rounded" style="margin-top: 2px!important;">
                            </div>
                            <div class="w-full relative">
                                <label for="flag-new" class="block font-medium text-xs">Flag</label>
                                <div class="flag-dropdown-container">
                                    <button type="button" class="flag-dropdown-toggle w-full border px-2 py-1 rounded text-left flex items-center justify-between" style="margin-top: 2px!important;">
                                        <span class="flag-selected-text">Select a flag...</span>
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                        </svg>
                                    </button>
                                    <div class="flag-dropdown-menu absolute top-full left-0 w-full bg-white border border-gray-300 rounded shadow-lg z-10 max-h-60 overflow-y-auto" style="display: none;">
                                        <div class="flag-option p-2 hover:bg-gray-100 cursor-pointer flex items-center selected" data-value="">
                                            <span>Select a flag...</span>
                                        </div>
                                        {{#each flags}}
                                            <div class="flag-option p-2 hover:bg-gray-100 cursor-pointer flex items-center" data-value="{{this.filename}}">
                                                <img src="/flags/{{this.filename}}" alt="{{this.filename}}" class="w-6 h-4 mr-2 object-cover">
                                                <span>{{this.name}}</span>
                                            </div>
                                        {{/each}}
                                    </div>
                                </div>
                                <input type="hidden" id="flag-new" name="flag" value="">
                            </div>
                        </div>

                        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-1 lg:grid-cols-2 gap-4">
                            <div class="w-full">
                                <label for="date-new" class="block font-medium text-xs">Day</label>
                                <input type="date" id="date-new" name="date" value=""
                                       class="w-full border px-2 py-1 rounded" style="margin-top: 2px!important;">
                            </div>
                            <div class="w-full">
                                <label for="time-new" class="block font-medium text-xs">Time</label>
                                <input type="time" id="time-new" name="time" value=""
                                       class="w-full border px-2 py-1 rounded" style="margin-top: 2px!important;">
                            </div>
                        </div>

                        <div class="grid grid-cols-1 sm:grid-cols-3 md:grid-cols-1 lg:grid-cols-3 gap-4">
                            <div class="w-full">
                                <label for="weatherText-new" class="block mb-1 font-medium text-xs">Weather</label>
                                <input type="text" id="weatherText-new" name="weatherText" value=""
                                       class="w-full border px-2 py-1 rounded" style="margin-top: 2px!important;">
                            </div>
                            <div class="w-full">
                                <label for="weatherIcon-new" class="block mb-1 font-medium text-xs">Weather Icon</label>
                                <input type="text" id="weatherIcon-new" name="weatherIcon" value=""
                                       class="w-full border px-2 py-1 rounded" style="margin-top: 2px!important;">
                            </div>
                            <div class="w-full">
                                <label for="weatherTemperature-new" class="block font-medium text-xs">Temperature
                                    (Â°C)</label>
                                <input type="number" id="weatherTemperature-new" name="weatherTemperature" value=""
                                       class="w-full border px-2 py-1 rounded" style="margin-top: 2px!important;">
                            </div>
                        </div>

                        <div class="w-full relative">
                            <label for="track_img-new" class="block font-medium text-xs">Track Image</label>
                            <div class="track-dropdown-container">
                                <button type="button" class="track-dropdown-toggle w-full border px-2 py-1 rounded text-left flex items-center justify-between" style="margin-top: 2px!important;">
                                    <span class="track-selected-text">Select a circuit...</span>
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                    </svg>
                                </button>
                                <div class="track-dropdown-menu absolute top-full left-0 w-full bg-white border border-gray-300 rounded shadow-lg z-10 max-h-60 overflow-y-auto" style="display: none;">
                                    <div class="track-option p-2 hover:bg-gray-100 cursor-pointer flex items-center selected" data-value="">
                                        <span>Select a circuit...</span>
                                    </div>
                                    {{#each circuits}}
                                        <div class="track-option p-2 hover:bg-gray-100 cursor-pointer flex items-center" data-value="{{this.filename}}">
                                            <img src="/flags/{{this.flag}}" alt="{{this.short}}" class="w-6 h-4 mr-2 object-cover">
                                            <span>{{this.name}}</span>
                                        </div>
                                    {{/each}}
                                </div>
                            </div>
                            <input type="hidden" id="track_img-new" name="track_img" value="">
                        </div>

                        <div class="flex gap-4">
                            <div class="w-full">
                                <label class="cursor-pointer">
                                    <span class="font-medium text-xs">Predictions Started</span>
                                    <span class="relative block">
                                        <input type="checkbox" name="predictionsStarted" id="predictionsStarted-new"
                                               class="sr-only peer"
                                               onchange="this.value = this.checked ? 'true' : 'false';" value="false">
                                        <span class="block w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></span>
                                    </span>
                                </label>
                            </div>
                            <div class="w-full">
                                <label class="cursor-pointer">
                                    <span class="font-medium text-xs">Predictions Ended</span>
                                    <span class="relative block">
                                        <input type="checkbox" name="predictionsEnded" id="predictionsEnded-new"
                                               class="sr-only peer"
                                               onchange="this.value = this.checked ? 'true' : 'false';" value="false">
                                        <span class="block w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></span>
                                    </span>
                                </label>
                            </div>
                        </div>
                        <div class="driver-pool bg-gray-50 p-2 rounded mb-4">
                            <div class="text-xs text-gray-500 mb-2">Driver Pool - Drag to Quali and/or Race grids</div>
                            <div id="driver-pool-new" class="grid grid-cols-2 gap-1 driver-pool-items" data-pool>
                                {{#each drivers}}
                                    <div class="driver-item flex items-center p-1 cursor-move rounded"
                                         style="background-color: {{color}}; color: white;"
                                         data-driver-id="{{id}}" draggable="true">
                                        <span class="text-xs truncate text-shadow">{{name}}</span>
                                    </div>
                                {{/each}}
                            </div>
                        </div>
                    </div>

                    <div class="md:col-span-4 lg:col-span-3 grid grid-cols-1 sm:grid-cols-2 gap-4 text-xs">
                        <div>
                            <label class="block mb-1 font-medium text-xs">Qualification Result</label>
                            <div id="quali-grid-new">
                                {{#each (range 1 20)}}
                                    <div class="grid-position flex items-center mb-2" data-position="{{this}}">
                                        <span class="mr-2 w-5 text-center font-bold">{{this}}</span>
                                        <div class="position-slot flex-1 min-h-6 border border-gray-200 rounded bg-white"
                                             data-slot-type="quali" data-slot-index="{{@index}}">
                                            <div class="h-6 flex items-center justify-center text-gray-400 empty-slot select-none">
                                                <input type="hidden" name="drivers[]" value="">
                                                Drop driver here
                                            </div>
                                        </div>
                                    </div>
                                {{/each}}
                            </div>
                        </div>
                        <div>
                            <label class="block mb-1 font-medium text-xs">Race Result</label>
                            <div id="race-grid-new">
                                {{#each (range 1 20)}}
                                    <div class="grid-position flex items-center mb-2" data-position="{{this}}">
                                        <span class="mr-2 w-5 text-center font-bold">{{this}}</span>
                                        <div class="position-slot flex-1 min-h-6 border border-gray-200 rounded bg-white"
                                             data-slot-type="race" data-slot-index="{{@index}}">
                                            <div class="h-6 flex items-center justify-center text-gray-400 empty-slot select-none">
                                                <input type="hidden" name="result[]" value="">
                                                Drop driver here
                                            </div>
                                        </div>
                                    </div>
                                {{/each}}
                            </div>
                        </div>
                    </div>
                </div>

                <div class="flex justify-between mt-6">
                    <button type="button" onclick="this.closest('.fixed').classList.add('hidden')"
                            class="bg-gray-300 px-4 py-2 rounded">Cancel
                    </button>
                    <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        function throttle(func, limit) {
            let inThrottle;
            return function() {
                const args = arguments;
                const context = this;
                if (!inThrottle) {
                    func.apply(context, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            }
        }

        function initializeFlagDropdowns() {
            document.querySelectorAll('.flag-dropdown-container').forEach(dropdown => {
                const toggle = dropdown.querySelector('.flag-dropdown-toggle');
                const menu = dropdown.querySelector('.flag-dropdown-menu');
                const selectedText = dropdown.querySelector('.flag-selected-text');
                const hiddenInput = dropdown.parentNode.querySelector('input[type="hidden"]');
                const options = dropdown.querySelectorAll('.flag-option');

                toggle.addEventListener('click', function(e) {
                    e.preventDefault();
                    menu.style.display = menu.style.display === 'none' ? 'block' : 'none';
                });

                options.forEach(option => {
                    option.addEventListener('click', function() {
                        options.forEach(opt => opt.classList.remove('selected', 'bg-gray-100'));

                        this.classList.add('selected', 'bg-gray-100');

                        const value = this.dataset.value;
                        const text = this.querySelector('span').textContent;
                        const img = this.querySelector('img');

                        hiddenInput.value = value;

                        if (img && value) {
                            selectedText.innerHTML = `<img src="${img.src}" alt="${img.alt}" class="w-6 h-4 mr-2 object-cover inline"> ${text}`;
                        } else {
                            selectedText.textContent = text;
                        }

                        menu.style.display = 'none';
                    });
                });
            });
        }

        function initializeTrackDropdowns() {
            document.querySelectorAll('.track-dropdown-container').forEach(dropdown => {
                const toggle = dropdown.querySelector('.track-dropdown-toggle');
                const menu = dropdown.querySelector('.track-dropdown-menu');
                const selectedText = dropdown.querySelector('.track-selected-text');
                const hiddenInput = dropdown.parentNode.querySelector('input[type="hidden"]');
                const options = dropdown.querySelectorAll('.track-option');

                toggle.addEventListener('click', function(e) {
                    e.preventDefault();
                    menu.style.display = menu.style.display === 'none' ? 'block' : 'none';
                });

                options.forEach(option => {
                    option.addEventListener('click', function() {
                        options.forEach(opt => opt.classList.remove('selected', 'bg-gray-100'));

                        this.classList.add('selected', 'bg-gray-100');

                        const value = this.dataset.value;
                        const text = this.querySelector('span').textContent;
                        const img = this.querySelector('img');

                        hiddenInput.value = value;
                        if (img && value) {
                            selectedText.innerHTML = `<img src="${img.src}" alt="${img.alt}" class="w-6 h-4 mr-2 object-cover inline"> ${text}`;
                        } else {
                            selectedText.textContent = text;
                        }

                        menu.style.display = 'none';
                    });
                });
            });
        }

        initializeFlagDropdowns();
        initializeTrackDropdowns();

        let dragData = {
            sourceType: null,      // "pool" or "slot"
            sourceGrid: null,      //
            sourceSlot: null,      // .position-slot
            driverItem: null,      // .driver-item
            slotType: null         // "quali" or "race"
        };

        // Drag start
        document.body.addEventListener('dragstart', function (ev) {
            if (!ev.target.classList.contains('driver-item')) return;
            dragData.driverItem = ev.target;
            let slot = ev.target.closest('.position-slot');
            if (slot) {
                dragData.sourceType = "slot";
                dragData.sourceSlot = slot;
                dragData.slotType = slot.getAttribute('data-slot-type') || slot.parentNode.getAttribute('data-slot-type');
                dragData.sourceGrid = slot.closest('.quali-grid, .race-grid') || slot.closest('[id^="quali-grid-"], [id^="race-grid-"]');
            } else if (ev.target.closest('.driver-pool')) {
                dragData.sourceType = "pool";
                dragData.sourceSlot = null;
                dragData.slotType = null;
                dragData.sourceGrid = null;
            }
            setTimeout(() => dragData.driverItem.classList.add('opacity-40'), 1);
        });

        let lastHoveredSlot = null;

        // Drag end
        document.body.addEventListener('dragend', function (ev) {
            if (dragData.driverItem) dragData.driverItem.classList.remove('opacity-40');
            dragData = {sourceType: null, sourceGrid: null, sourceSlot: null, driverItem: null, slotType: null};
            document.querySelectorAll('.position-slot').forEach(el => el.classList.remove('ring', 'ring-blue-400'));
            if (lastHoveredSlot) {
                lastHoveredSlot.classList.remove('ring', 'ring-blue-400');
                lastHoveredSlot = null;
            }
        });

        const throttledDragover = throttle(function(slot) {
            if (lastHoveredSlot && lastHoveredSlot !== slot) {
                lastHoveredSlot.classList.remove('ring', 'ring-blue-400');
            }
            slot.classList.add('ring', 'ring-blue-400');
            lastHoveredSlot = slot;
        }, 100);

        document.body.addEventListener('dragover', function(ev) {
            const slot = ev.target.closest('.position-slot');
            if (slot) {
                ev.preventDefault();
                throttledDragover(slot);
            }
        });

        document.body.addEventListener('drop', function(ev) {
            const slot = ev.target.closest('.position-slot');
            if (slot) {
                ev.preventDefault();
                slot.classList.remove('ring', 'ring-blue-400');
                if (!dragData.driverItem) return;

                const grid = slot.closest('[id^="quali-grid-"], [id^="race-grid-"]');
                const slotType = slot.getAttribute('data-slot-type') || (grid.id.includes('quali') ? 'quali' : 'race');
                const inputName = slotType === 'quali' ? 'drivers[]' : 'result[]';

                const gridSlots = Array.from(grid.querySelectorAll('.position-slot'));
                const draggedDriverId = dragData.driverItem.getAttribute('data-driver-id');
                if (gridSlots.some(s => {
                    let d = s.querySelector('.driver-item');
                    return d && d.getAttribute('data-driver-id') === draggedDriverId;
                })) {
                    if (dragData.sourceType === "slot" && dragData.sourceSlot && dragData.sourceSlot.closest('[id]') === grid.closest('[id]')) {
                    } else {
                        slot.classList.add('bg-red-100');
                        setTimeout(() => slot.classList.remove('bg-red-100'), 500);
                        return;
                    }
                }

                if (dragData.sourceType === "pool") {
                    let current = slot.querySelector('.driver-item');
                    if (current) current.remove();
                    let empty = slot.querySelector('.empty-slot');
                    if (empty) empty.remove();

                    let clone = dragData.driverItem.cloneNode(true);
                    clone.classList.remove('opacity-40');

                    Array.from(clone.querySelectorAll('input[type="hidden"]')).forEach(i => i.remove());
                    let newInput = document.createElement('input');
                    newInput.type = 'hidden';
                    newInput.name = inputName;
                    newInput.value = clone.getAttribute('data-driver-id');
                    clone.appendChild(newInput);
                    slot.appendChild(clone);
                } else if (dragData.sourceType === "slot" && dragData.sourceSlot && dragData.sourceSlot.closest('[id]') === grid.closest('[id]')) {
                    const sourceSlot = dragData.sourceSlot;
                    const targetSlot = slot;

                    const sourceDriver = sourceSlot.querySelector('.driver-item');
                    const targetDriver = targetSlot.querySelector('.driver-item');

                    if (sourceDriver) {
                        if (targetDriver) {
                            sourceSlot.appendChild(targetDriver);
                            targetSlot.appendChild(sourceDriver);
                        } else {
                            targetSlot.innerHTML = '';
                            targetSlot.appendChild(sourceDriver);
                            sourceSlot.innerHTML = `<div class="h-6 flex items-center justify-center text-gray-400 empty-slot select-none">
                                <input type="hidden" name="${inputName}" value="">
                                Drop driver here
                            </div>`;
                        }
                    }
                } else if (dragData.sourceType === "slot") {
                    let current = slot.querySelector('.driver-item');
                    if (current) current.remove();
                    let empty = slot.querySelector('.empty-slot');
                    if (empty) empty.remove();

                    let clone = dragData.driverItem.cloneNode(true);
                    clone.classList.remove('opacity-40');
                    Array.from(clone.querySelectorAll('input[type="hidden"]')).forEach(i => i.remove());
                    let newInput = document.createElement('input');
                    newInput.type = 'hidden';
                    newInput.name = inputName;
                    newInput.value = clone.getAttribute('data-driver-id');
                    clone.appendChild(newInput);
                    slot.appendChild(clone);
                }
            }
        });

        document.body.addEventListener('dblclick', function (e) {
            const slot = e.target.closest('.position-slot');
            if (slot) {
                const slotType = slot.getAttribute('data-slot-type');
                slot.innerHTML = `<div class="h-6 flex items-center justify-center text-gray-400 empty-slot select-none">
                <input type="hidden" name="${slotType === 'quali' ? 'drivers[]' : 'result[]'}" value="">
                Drop driver here
            </div>`;
            }
        });

        document.querySelectorAll('.load-result-api-btn').forEach(function(btn) {
            btn.addEventListener('click', function() {
                const raceId = btn.getAttribute('data-race-id');
                fetch(`/admin/query/race/${raceId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        alert('Result loaded from API!');
                        window.location.reload();
                    } else {
                        alert(data.message || 'Failed to load result from API.');
                    }
                })
                .catch(() => alert('Error loading result from API.'));
            });
        });

        document.querySelectorAll('.load-quali-api-btn').forEach(function(btn) {
            btn.addEventListener('click', function() {
                const raceId = btn.getAttribute('data-race-id');
                fetch(`/admin/query/quali/${raceId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        alert('Qualification loaded from API!');
                        window.location.reload();
                    } else {
                        alert(data.message || 'Failed to load qualification from API.');
                    }
                })
                .catch(() => alert('Error loading qualification from API.'));
            });
        });
    });
</script>