<h3 class="text-xl mb-4 font-bold text-center font-semibold text-gray-800">Your Prediction</h3>

{{^race.predictionsStarted}}
    <div class="p-4 bg-gray-100 rounded-md text-center">
        <i class="fas fa-lock text-gray-500 text-2xl mb-2"></i>
        <p class="text-gray-700">Prediction time hasn't started yet</p>
    </div>
{{/race.predictionsStarted}}

{{#race.predictionsStarted}}
{{#race.predictionsEnded}}
    <div class="p-4 bg-gray-100 rounded-md text-center">
        <i class="fas fa-lock text-gray-500 text-2xl mb-2"></i>
        <p class="text-gray-700">Prediction time has ended</p>
    </div>
    {{#userPrediction}}
        <div class="mt-4">
            <h4 class="text-lg font-medium mb-2 text-gray-700">Your Prediction</h4>
            <div class="grid grid-cols-3 gap-2 mb-4">
                <div class="text-center p-3 bg-red-600 text-white rounded-md">
                    <div class="text-xl font-bold">1st</div>
                    <div>{{userPrediction.firstDriver}}</div>
                </div>
                <div class="text-center p-3 bg-blue-600 text-white rounded-md">
                    <div class="text-xl font-bold">2nd</div>
                    <div>{{userPrediction.secondDriver}}</div>
                </div>
                <div class="text-center p-3 bg-green-600 text-white rounded-md">
                    <div class="text-xl font-bold">3rd</div>
                    <div>{{userPrediction.thirdDriver}}</div>
                </div>
            </div>
            <div class="flex flex-wrap gap-2 bg-gray-100 p-3 rounded-md">
                {{#userPrediction.othersDrivers}}
                    <div class="bg-white px-2 py-1 rounded border border-gray-300 text-sm">{{.}}</div>
                {{/userPrediction.othersDrivers}}
            </div>
        </div>
    {{/userPrediction}}
{{/race.predictionsEnded}}

{{^race.predictionsEnded}}
    {{^userPrediction}}
    <div class="relative">
        <button id="viewPredictions" class="text-gray-500 hover:text-gray-700">
            <svg class="absolute top-0 right-0 w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>
    </div>
    {{/userPrediction}}
    {{#userPrediction}}
        <div class="mb-4">
            <div class="grid grid-cols-3 gap-2 mb-4">
                <div class="text-center p-3 bg-red-600 text-white rounded-md">
                    <div class="text-xl font-bold">1st</div>
                    <div>{{userPrediction.firstDriver}}</div>
                </div>
                <div class="text-center p-3 bg-blue-600 text-white rounded-md">
                    <div class="text-xl font-bold">2nd</div>
                    <div>{{userPrediction.secondDriver}}</div>
                </div>
                <div class="text-center p-3 bg-green-600 text-white rounded-md">
                    <div class="text-xl font-bold">3rd</div>
                    <div>{{userPrediction.thirdDriver}}</div>
                </div>
            </div>
            <div class="flex flex-wrap gap-2 bg-gray-100 p-3 rounded-md mb-4">
                {{#userPrediction.othersDrivers}}
                    <div class="bg-white px-2 py-1 rounded border border-gray-300 text-sm">{{.}}</div>
                {{/userPrediction.othersDrivers}}
            </div>
            <button id="editPredictionBtn" class="w-full py-2 px-4 bg-yellow-500 text-white font-medium rounded hover:bg-yellow-600 transition duration-150">
                Edit Prediction
            </button>
        </div>
    {{/userPrediction}}

    <div id="predictionFormContainer" class="{{#userPrediction}}hidden{{/userPrediction}}">
        <form id="predictionForm" action="/race/{{race.id}}/predict" method="POST" class="h-full flex justify-between flex-col gap-6">
            <div class="prediction-container gap-6">
                <div class="flex flex-col justify-center gap-4">
                    <div class="prediction-slots">
                        <div class="podium-slots grid grid-cols-3 items-end gap-2 mb-6">
                            <div class="prediction-slot col-span-1 h-32 flex flex-col items-center justify-center p-2 bg-gray-100 rounded-md border-2 border-dashed border-gray-300" id="secondSlot" data-position="second">
                                <div class="position-number text-2xl font-bold text-gray-500">2</div>
                                <input type="hidden" name="second" id="secondInput">
                            </div>
                            <div class="prediction-slot col-span-1 h-40 flex flex-col items-center justify-center p-2 bg-gray-100 rounded-md border-2 border-dashed border-gray-300" id="firstSlot" data-position="first">
                                <div class="position-number text-3xl font-bold text-gray-500">1</div>
                                <input type="hidden" name="first" id="firstInput">
                            </div>
                            <div class="prediction-slot col-span-1 h-28 flex flex-col items-center justify-center p-2 bg-gray-100 rounded-md border-2 border-dashed border-gray-300" id="thirdSlot" data-position="third">
                                <div class="position-number text-xl font-bold text-gray-500">3</div>
                                <input type="hidden" name="third" id="thirdInput">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="drivers-pool max-w-[500px] m-auto">
                        <div id="othersSlot" class="points-slots bg-gray-100 p-3 rounded-md min-h-40 border-2 border-dashed border-gray-300">
                        <div class="position-number text-xl text-center font-bold text-gray-500 pt-4">4-10</div>
                        <div class="position-label text-sm text-gray-400 text-center pb-4">(order doesn't matter)</div>
                        <div class="points-instructions text-gray-500 text-center py-4 animate-pulse">Drag drivers on the cards for your prediction</div>
                        <div id="othersContainer" class="others-container grid grid-cols-1 md:grid-cols-2 flex-wrap gap-2"></div>
                        <div id="othersInputs"></div>
                    </div>
                </div>
            </div>

            <div class="text-center text-gray-400 text-sm" id="">
                <i>1st place correct =</i> 4 points.<br>
                <i>2nd place correct =</i> 3 points.<br>
                <i>3rd place correct =</i> 2 points.<br>
                <i>Any other correct top 10 driver =</i> 1 point.<br>
            </div>

            <div class="form-actions flex justify-center gap-4">
                <div class="username-field">
                    <label for="username" class="hidden block text-sm font-medium text-gray-700">Your Name</label>
                    <input type="text" id="username" name="username" required placeholder="Enter your name"
                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500">
                </div>
                <button type="submit" class="py-2 px-6 bg-red-600 text-white font-medium rounded hover:bg-red-700 transition duration-150" id="submitBtn" disabled>Submit</button>
            </div>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const viewPredictionsBtn = document.getElementById('viewPredictions');
            if (viewPredictionsBtn) {
                viewPredictionsBtn.addEventListener('click', function () {
                    document.querySelector('#predictions').classList.remove('hidden');
                    document.querySelector('#prediction').classList.add('hidden');
                    document.getElementById('otherPredictionsContainer').classList.remove('hidden');
                });
            }

            const driversPool = document.getElementById('driversGrid');
            const firstSlot = document.getElementById('firstSlot');
            const secondSlot = document.getElementById('secondSlot');
            const thirdSlot = document.getElementById('thirdSlot');
            const othersSlot = document.getElementById('othersSlot');
            const othersContainer = document.getElementById('othersContainer');
            const othersInputs = document.getElementById('othersInputs');
            const submitBtn = document.getElementById('submitBtn');

            const firstInput = document.getElementById('firstInput');
            const secondInput = document.getElementById('secondInput');
            const thirdInput = document.getElementById('thirdInput');

            const predictions = { first: null, second: null, third: null, others: [] };
            const driverColors = {};

            const predictionForm = document.getElementById('predictionForm');
            const usernameInput = document.getElementById('username');

            const allPredictions = JSON.parse(`{{{predictionsJson}}}`);
            const raceId = window.location.pathname.split('/').pop();
            let storedUsername = localStorage.getItem(`polepick-username-for-race-${raceId}`);
            document.cookie = `polepick-username-for-race-${raceId}=${storedUsername}; path=/; max-age=31536000;`;

            if (storedUsername && usernameInput) {
                usernameInput.value = storedUsername;
            }

            const userPrediction = allPredictions.find(p => p.username === storedUsername);
            if (userPrediction) {
                document.querySelector('#prediction').classList.add('hidden');
                document.querySelector('#predictions').classList.remove('hidden');

                document.querySelector('.points-instructions').style.display = 'none';
                document.getElementById('otherPredictionsContainer').classList.remove('hidden');
                document.getElementById('predictionsHiddenMessage').classList.add('hidden');

                moveDriverToFirst(userPrediction.firstDriver);
                moveDriverToSecond(userPrediction.secondDriver);
                moveDriverToThird(userPrediction.thirdDriver);
                userPrediction.othersDrivers.forEach(driver => {
                    moveDriverToOthers(driver);
                });
            }

            function moveDriverToFirst(driverName) {
                predictions.first = driverName;
                firstInput.value = driverName;
                moveDriver(firstSlot, driverName);
            }
            function moveDriverToSecond(driverName) {
                predictions.first = driverName;
                firstInput.value = driverName;
                moveDriver(secondSlot, driverName);
            }
            function moveDriverToThird(driverName) {
                predictions.first = driverName;
                firstInput.value = driverName;
                moveDriver(thirdSlot, driverName);
            }
            function moveDriverToOthers(driverName) {
                predictions.others.push(driverName);
                moveDriver(othersContainer, driverName);
            }
            function moveDriver(where, driverName) {
                driversPool.querySelectorAll('.driver-item').forEach(item => {
                    if (item.dataset.driver === driverName) {
                        where.appendChild(item.cloneNode(true));
                    }
                });
            }

            document.querySelectorAll('.driver-item').forEach(item => {
                driverColors[item.dataset.driver] = item.dataset.color;
                item.addEventListener('dragstart', handleDragStart);
                item.addEventListener('dragend', handleDragEnd);
            });

            [firstSlot, secondSlot, thirdSlot, othersSlot, othersContainer, driversPool].forEach(slot => {
                slot.addEventListener('dragover', handleDragOver);
                slot.addEventListener('dragleave', handleDragLeave);
                slot.addEventListener('drop', handleDrop);
            });

            function handleDragStart(e) {
                e.dataTransfer.setData('text/plain', e.target.dataset.driver);
                e.dataTransfer.effectAllowed = 'move';
                window.draggedElement = e.target;
                setTimeout(() => {
                    e.target.classList.add('dragging');
                    e.target.style.opacity = '0.4';
                }, 0);
            }

            function handleDragEnd(e) {
                if (window.draggedElement) {
                    window.draggedElement.classList.remove('dragging');
                    window.draggedElement.style.opacity = '1';
                }
            }

            function handleDragOver(e) {
                e.preventDefault();
                e.dataTransfer.dropEffect = 'move';
                e.currentTarget.classList.add('border-red-500');
            }

            function handleDragLeave(e) {
                e.currentTarget.classList.remove('border-red-500');
            }

            function handleDrop(e) {
                e.preventDefault();
                e.currentTarget.classList.remove('border-red-500');

                const driver = e.dataTransfer.getData('text/plain');
                const color = driverColors[driver];
                const targetSlot = e.currentTarget;

                if (targetSlot.id === 'driversGrid') {
                    removeDriverFromPreviousSlot(driver);
                    return;
                }

                removeDriverFromPreviousSlot(driver);

                let existingDriver = null;

                if (targetSlot.id === 'firstSlot' || targetSlot.dataset.position === 'first') {
                    existingDriver = predictions.first;
                    predictions.first = driver;
                    firstInput.value = driver;
                    renderPodiumSlot(firstSlot, driver, color, 'first');

                } else if (targetSlot.id === 'secondSlot' || targetSlot.dataset.position === 'second') {
                    existingDriver = predictions.second;
                    predictions.second = driver;
                    secondInput.value = driver;
                    renderPodiumSlot(secondSlot, driver, color, 'second');

                } else if (targetSlot.id === 'thirdSlot' || targetSlot.dataset.position === 'third') {
                    existingDriver = predictions.third;
                    predictions.third = driver;
                    thirdInput.value = driver;
                    renderPodiumSlot(thirdSlot, driver, color, 'third');

                } else if (targetSlot.id === 'othersSlot' || targetSlot.id === 'othersContainer') {
                    if (predictions.others.length < 7) {
                        predictions.others.push(driver);
                        addDriverToOthers(driver, color);
                    }
                }

                if (existingDriver && existingDriver !== driver) {
                    addToDriversPool(existingDriver);
                }

                checkFormValidity();
            }

            function removeFromDriversPool(driverName) {
                const driverElements = driversPool.querySelectorAll(`.driver-item[data-driver="${driverName}"]`);
                driverElements.forEach(el => el.remove());
            }

            function addToDriversPool(driverName) {
                const existing = driversPool.querySelector(`.driver-item[data-driver="${driverName}"]`);
                if (!existing) {
                    const color = driverColors[driverName];
                    const driverEl = document.createElement('div');
                    driverEl.className = "driver-item p-1 mb-2 text-md font-bold text-center rounded-lg border-2 border-[" + color + "] bg-[" + color + "] text-white shadow-sm cursor-move";
                    driverEl.textContent = driverName;
                    driverEl.draggable = true;
                    driverEl.setAttribute('data-color', color);
                    driverEl.setAttribute('data-driver', driverName);
                    driverEl.addEventListener('dragstart', handleDragStart);
                    driverEl.addEventListener('dragend', handleDragEnd);
                    driversPool.appendChild(driverEl);
                }
            }

            function removeDriverFromPreviousSlot(driver) {
                if (predictions.first === driver) {
                    predictions.first = null;
                    firstInput.value = '';
                    renderPodiumSlot(firstSlot, null, null, 'first');
                    addToDriversPool(driver);
                } else if (predictions.second === driver) {
                    predictions.second = null;
                    secondInput.value = '';
                    renderPodiumSlot(secondSlot, null, null, 'second');
                    addToDriversPool(driver);
                } else if (predictions.third === driver) {
                    predictions.third = null;
                    thirdInput.value = '';
                    renderPodiumSlot(thirdSlot, null, null, 'third');
                    addToDriversPool(driver);
                } else {
                    const index = predictions.others.indexOf(driver);
                    if (index !== -1) {
                        const driverElement = othersContainer.querySelector(`.driver-item[data-driver="${driver}"]`);
                        if (driverElement) {
                            driverElement.remove();
                        }

                        const input = othersInputs.querySelector(`input[value="${driver}"]`);
                        if (input) {
                            input.remove();
                        }

                        predictions.others.splice(index, 1);

                        updateOthersCounter();

                        addToDriversPool(driver);
                    }
                }
            }

            function renderPodiumSlot(slot, driver, color, position) {
                const hiddenInput = slot.querySelector('input[type="hidden"]');

                const positionAttr = slot.getAttribute('data-position');
                slot.innerHTML = '';
                slot.setAttribute('data-position', positionAttr);

                const posNumber = document.createElement('div');
                posNumber.className = 'position-number text-' + (position === 'first' ? '3xl' : position === 'second' ? '2xl' : 'xl') + ' font-bold text-gray-500';
                posNumber.textContent = position === 'first' ? '1' : position === 'second' ? '2' : '3';
                slot.appendChild(posNumber);

                slot.appendChild(hiddenInput);

                if (driver) {
                    const driverEl = document.createElement('div');
                    driverEl.className = "w-full p-1 mb-2 text-md font-bold text-center rounded-lg border-2 border-[" + color + "] bg-[" + color + "] text-white shadow-sm cursor-move";
                    driverEl.textContent = driver;
                    driverEl.draggable = true;
                    driverEl.setAttribute('data-color', color);
                    driverEl.setAttribute('data-driver', driver);
                    driverEl.addEventListener('dragstart', handleDragStart);
                    driverEl.addEventListener('dragend', handleDragEnd);
                    slot.appendChild(driverEl);
                }
            }

            function addDriverToOthers(driver, color) {
                const driverEl = document.createElement('div');
                driverEl.className = "driver-item w-full p-1 mb-2 text-md font-bold text-center rounded-lg border-2 border-[" + color + "] bg-[" + color + "] text-white shadow-sm cursor-move";
                driverEl.textContent = driver;
                driverEl.draggable = true;
                driverEl.setAttribute('data-color', color);
                driverEl.setAttribute('data-driver', driver);
                driverEl.addEventListener('dragstart', handleDragStart);
                driverEl.addEventListener('dragend', handleDragEnd);

                const counter = othersContainer.querySelector('.drivers-counter');
                if (counter) {
                    othersContainer.insertBefore(driverEl, counter);
                } else {
                    othersContainer.appendChild(driverEl);
                }

                const index = predictions.others.indexOf(driver);
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = `others[${index}]`;
                input.value = driver;
                othersInputs.appendChild(input);

                updateOthersCounter();
            }

            function updateOthersCounter() {
                const existingCounter = othersContainer.querySelector('.drivers-counter');
                if (existingCounter) {
                    existingCounter.remove();
                }

                if (predictions.others.length < 7) {
                    const counter = document.createElement('div');
                    counter.className = 'w-full drivers-counter text-gray-400 text-sm text-center mt-2';
                    counter.textContent = `${predictions.others.length}/7 selected`;
                    othersContainer.appendChild(counter);
                }

                const pointsInstructions = document.querySelector('.points-instructions');
                if (pointsInstructions) {
                    pointsInstructions.style.display = predictions.others.length === 0 ? 'block' : 'none';
                }
            }

            function checkFormValidity() {
                submitBtn.disabled = !(predictions.first && predictions.second && predictions.third && predictions.others.length === 7);
            }

            predictionForm.addEventListener('submit', function(e) {
                e.preventDefault();

                const username = usernameInput.value;
                if (!username) {
                    alert('Please enter your name');
                    return;
                }

                localStorage.setItem(`polepick-username-for-race-${raceId}`, username);

                const formData = {
                    username: username,
                    first: firstInput.value,
                    second: secondInput.value,
                    third: thirdInput.value,
                    others: predictions.others,
                };

                fetch(`/race/${raceId}/predict`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.reload();
                    } else {
                        alert('Error submitting prediction: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error submitting prediction. Please try again.');
                });
            });
        });
    </script>
{{/race.predictionsEnded}}
{{/race.predictionsStarted}}